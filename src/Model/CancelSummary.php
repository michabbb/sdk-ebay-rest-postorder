<?php
/**
 * CancelSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\postorder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Cancellation Search API
 *
 * API for searching eBay order cancellations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\postorder\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\postorder\ObjectSerializer;
use macropage\SDKs\ebay\rest\postorder\Model\Amount;
use macropage\SDKs\ebay\rest\postorder\Model\PayoutRecoupInfo;

/**
 * CancelSummary Class Doc Comment
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\postorder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CancelSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'CancelSummary';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'buyerLoginName'        => 'string',
        'buyerResponseDueDate'  => DateTime::class,
        'cancelCloseDate'       => DateTime::class,
        'cancelCloseReason'     => 'string',
        'cancelId'              => 'string',
        'cancelReason'          => 'string',
        'cancelRequestDate'     => DateTime::class,
        'cancelState'           => 'string',
        'lineItems'             => '\macropage\SDKs\ebay\rest\postorder\Model\LineItem[]',
        'lastModifiedDate'      => DateTime::class,
        'cancelStatus'          => 'string',
        'legacyOrderId'         => 'string',
        'marketplaceId'         => 'string',
        'partialOrderType'      => 'string',
        'paymentStatus'         => 'string',
        'payoutRecoupInfo'      => PayoutRecoupInfo::class,
        'requestorType'         => 'string',
        'requestRefundAmount'   => Amount::class,
        'sellerLoginName'       => 'string',
        'sellerResponseDueDate' => DateTime::class,
        'shipmentDate'          => DateTime::class
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'buyerLoginName'        => null,
        'buyerResponseDueDate'  => null,
        'cancelCloseDate'       => null,
        'cancelCloseReason'     => null,
        'cancelId'              => null,
        'cancelReason'          => null,
        'cancelRequestDate'     => null,
        'cancelState'           => null,
        'lineItems'             => null,
        'lastModifiedDate'      => null,
        'cancelStatus'          => null,
        'legacyOrderId'         => null,
        'marketplaceId'         => null,
        'partialOrderType'      => null,
        'paymentStatus'         => null,
        'payoutRecoupInfo'      => null,
        'requestorType'         => null,
        'requestRefundAmount'   => null,
        'sellerLoginName'       => null,
        'sellerResponseDueDate' => null,
        'shipmentDate'          => null
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        'buyerLoginName'        => false,
        'buyerResponseDueDate'  => false,
        'cancelCloseDate'       => false,
        'cancelCloseReason'     => false,
        'cancelId'              => false,
        'cancelReason'          => false,
        'cancelRequestDate'     => false,
        'cancelState'           => false,
        'lineItems'             => false,
        'lastModifiedDate'      => false,
        'cancelStatus'          => false,
        'legacyOrderId'         => false,
        'marketplaceId'         => false,
        'partialOrderType'      => false,
        'paymentStatus'         => false,
        'payoutRecoupInfo'      => false,
        'requestorType'         => false,
        'requestRefundAmount'   => false,
        'sellerLoginName'       => false,
        'sellerResponseDueDate' => false,
        'shipmentDate'          => false
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyerLoginName'        => 'buyerLoginName',
        'buyerResponseDueDate'  => 'buyerResponseDueDate',
        'cancelCloseDate'       => 'cancelCloseDate',
        'cancelCloseReason'     => 'cancelCloseReason',
        'cancelId'              => 'cancelId',
        'cancelReason'          => 'cancelReason',
        'cancelRequestDate'     => 'cancelRequestDate',
        'cancelState'           => 'cancelState',
        'lineItems'             => 'lineItems',
        'lastModifiedDate'      => 'lastModifiedDate',
        'cancelStatus'          => 'cancelStatus',
        'legacyOrderId'         => 'legacyOrderId',
        'marketplaceId'         => 'marketplaceId',
        'partialOrderType'      => 'partialOrderType',
        'paymentStatus'         => 'paymentStatus',
        'payoutRecoupInfo'      => 'payoutRecoupInfo',
        'requestorType'         => 'requestorType',
        'requestRefundAmount'   => 'requestRefundAmount',
        'sellerLoginName'       => 'sellerLoginName',
        'sellerResponseDueDate' => 'sellerResponseDueDate',
        'shipmentDate'          => 'shipmentDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyerLoginName'        => 'setBuyerLoginName',
        'buyerResponseDueDate'  => 'setBuyerResponseDueDate',
        'cancelCloseDate'       => 'setCancelCloseDate',
        'cancelCloseReason'     => 'setCancelCloseReason',
        'cancelId'              => 'setCancelId',
        'cancelReason'          => 'setCancelReason',
        'cancelRequestDate'     => 'setCancelRequestDate',
        'cancelState'           => 'setCancelState',
        'lineItems'             => 'setLineItems',
        'lastModifiedDate'      => 'setLastModifiedDate',
        'cancelStatus'          => 'setCancelStatus',
        'legacyOrderId'         => 'setLegacyOrderId',
        'marketplaceId'         => 'setMarketplaceId',
        'partialOrderType'      => 'setPartialOrderType',
        'paymentStatus'         => 'setPaymentStatus',
        'payoutRecoupInfo'      => 'setPayoutRecoupInfo',
        'requestorType'         => 'setRequestorType',
        'requestRefundAmount'   => 'setRequestRefundAmount',
        'sellerLoginName'       => 'setSellerLoginName',
        'sellerResponseDueDate' => 'setSellerResponseDueDate',
        'shipmentDate'          => 'setShipmentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyerLoginName'        => 'getBuyerLoginName',
        'buyerResponseDueDate'  => 'getBuyerResponseDueDate',
        'cancelCloseDate'       => 'getCancelCloseDate',
        'cancelCloseReason'     => 'getCancelCloseReason',
        'cancelId'              => 'getCancelId',
        'cancelReason'          => 'getCancelReason',
        'cancelRequestDate'     => 'getCancelRequestDate',
        'cancelState'           => 'getCancelState',
        'lineItems'             => 'getLineItems',
        'lastModifiedDate'      => 'getLastModifiedDate',
        'cancelStatus'          => 'getCancelStatus',
        'legacyOrderId'         => 'getLegacyOrderId',
        'marketplaceId'         => 'getMarketplaceId',
        'partialOrderType'      => 'getPartialOrderType',
        'paymentStatus'         => 'getPaymentStatus',
        'payoutRecoupInfo'      => 'getPayoutRecoupInfo',
        'requestorType'         => 'getRequestorType',
        'requestRefundAmount'   => 'getRequestRefundAmount',
        'sellerLoginName'       => 'getSellerLoginName',
        'sellerResponseDueDate' => 'getSellerResponseDueDate',
        'shipmentDate'          => 'getShipmentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('buyerLoginName', $data ?? [], null);
        $this->setIfExists('buyerResponseDueDate', $data ?? [], null);
        $this->setIfExists('cancelCloseDate', $data ?? [], null);
        $this->setIfExists('cancelCloseReason', $data ?? [], null);
        $this->setIfExists('cancelId', $data ?? [], null);
        $this->setIfExists('cancelReason', $data ?? [], null);
        $this->setIfExists('cancelRequestDate', $data ?? [], null);
        $this->setIfExists('cancelState', $data ?? [], null);
        $this->setIfExists('lineItems', $data ?? [], null);
        $this->setIfExists('lastModifiedDate', $data ?? [], null);
        $this->setIfExists('cancelStatus', $data ?? [], null);
        $this->setIfExists('legacyOrderId', $data ?? [], null);
        $this->setIfExists('marketplaceId', $data ?? [], null);
        $this->setIfExists('partialOrderType', $data ?? [], null);
        $this->setIfExists('paymentStatus', $data ?? [], null);
        $this->setIfExists('payoutRecoupInfo', $data ?? [], null);
        $this->setIfExists('requestorType', $data ?? [], null);
        $this->setIfExists('requestRefundAmount', $data ?? [], null);
        $this->setIfExists('sellerLoginName', $data ?? [], null);
        $this->setIfExists('sellerResponseDueDate', $data ?? [], null);
        $this->setIfExists('shipmentDate', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array $fields
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyerLoginName
     *
     * @return string|null
     */
    public function getBuyerLoginName()
    {
        return $this->container['buyerLoginName'];
    }

    /**
     * Sets buyerLoginName
     *
     * @param string|null $buyerLoginName buyerLoginName
     *
     * @return self
     */
    public function setBuyerLoginName($buyerLoginName)
    {
        if (is_null($buyerLoginName)) {
            throw new \InvalidArgumentException('non-nullable buyerLoginName cannot be null');
        }
        $this->container['buyerLoginName'] = $buyerLoginName;

        return $this;
    }

    /**
     * Gets buyerResponseDueDate
     *
     * @return \DateTime|null
     */
    public function getBuyerResponseDueDate()
    {
        return $this->container['buyerResponseDueDate'];
    }

    /**
     * Sets buyerResponseDueDate
     *
     * @param \DateTime|null $buyerResponseDueDate buyerResponseDueDate
     *
     * @return self
     */
    public function setBuyerResponseDueDate($buyerResponseDueDate)
    {
        if (is_null($buyerResponseDueDate)) {
            throw new \InvalidArgumentException('non-nullable buyerResponseDueDate cannot be null');
        }
        $this->container['buyerResponseDueDate'] = $buyerResponseDueDate;

        return $this;
    }

    /**
     * Gets cancelCloseDate
     *
     * @return \DateTime|null
     */
    public function getCancelCloseDate()
    {
        return $this->container['cancelCloseDate'];
    }

    /**
     * Sets cancelCloseDate
     *
     * @param \DateTime|null $cancelCloseDate cancelCloseDate
     *
     * @return self
     */
    public function setCancelCloseDate($cancelCloseDate)
    {
        if (is_null($cancelCloseDate)) {
            throw new \InvalidArgumentException('non-nullable cancelCloseDate cannot be null');
        }
        $this->container['cancelCloseDate'] = $cancelCloseDate;

        return $this;
    }

    /**
     * Gets cancelCloseReason
     *
     * @return string|null
     */
    public function getCancelCloseReason()
    {
        return $this->container['cancelCloseReason'];
    }

    /**
     * Sets cancelCloseReason
     *
     * @param string|null $cancelCloseReason cancelCloseReason
     *
     * @return self
     */
    public function setCancelCloseReason($cancelCloseReason)
    {
        if (is_null($cancelCloseReason)) {
            throw new \InvalidArgumentException('non-nullable cancelCloseReason cannot be null');
        }
        $this->container['cancelCloseReason'] = $cancelCloseReason;

        return $this;
    }

    /**
     * Gets cancelId
     *
     * @return string|null
     */
    public function getCancelId()
    {
        return $this->container['cancelId'];
    }

    /**
     * Sets cancelId
     *
     * @param string|null $cancelId cancelId
     *
     * @return self
     */
    public function setCancelId($cancelId)
    {
        if (is_null($cancelId)) {
            throw new \InvalidArgumentException('non-nullable cancelId cannot be null');
        }
        $this->container['cancelId'] = $cancelId;

        return $this;
    }

    /**
     * Gets cancelReason
     *
     * @return string|null
     */
    public function getCancelReason()
    {
        return $this->container['cancelReason'];
    }

    /**
     * Sets cancelReason
     *
     * @param string|null $cancelReason cancelReason
     *
     * @return self
     */
    public function setCancelReason($cancelReason)
    {
        if (is_null($cancelReason)) {
            throw new \InvalidArgumentException('non-nullable cancelReason cannot be null');
        }
        $this->container['cancelReason'] = $cancelReason;

        return $this;
    }

    /**
     * Gets cancelRequestDate
     *
     * @return \DateTime|null
     */
    public function getCancelRequestDate()
    {
        return $this->container['cancelRequestDate'];
    }

    /**
     * Sets cancelRequestDate
     *
     * @param \DateTime|null $cancelRequestDate cancelRequestDate
     *
     * @return self
     */
    public function setCancelRequestDate($cancelRequestDate)
    {
        if (is_null($cancelRequestDate)) {
            throw new \InvalidArgumentException('non-nullable cancelRequestDate cannot be null');
        }
        $this->container['cancelRequestDate'] = $cancelRequestDate;

        return $this;
    }

    /**
     * Gets cancelState
     *
     * @return string|null
     */
    public function getCancelState()
    {
        return $this->container['cancelState'];
    }

    /**
     * Sets cancelState
     *
     * @param string|null $cancelState cancelState
     *
     * @return self
     */
    public function setCancelState($cancelState)
    {
        if (is_null($cancelState)) {
            throw new \InvalidArgumentException('non-nullable cancelState cannot be null');
        }
        $this->container['cancelState'] = $cancelState;

        return $this;
    }

    /**
     * Gets lineItems
     *
     * @return \macropage\SDKs\ebay\rest\postorder\Model\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['lineItems'];
    }

    /**
     * Sets lineItems
     *
     * @param \macropage\SDKs\ebay\rest\postorder\Model\LineItem[]|null $lineItems lineItems
     *
     * @return self
     */
    public function setLineItems($lineItems)
    {
        if (is_null($lineItems)) {
            throw new \InvalidArgumentException('non-nullable lineItems cannot be null');
        }
        $this->container['lineItems'] = $lineItems;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \DateTime|null $lastModifiedDate lastModifiedDate
     *
     * @return self
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        if (is_null($lastModifiedDate)) {
            throw new \InvalidArgumentException('non-nullable lastModifiedDate cannot be null');
        }
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets cancelStatus
     *
     * @return string|null
     */
    public function getCancelStatus()
    {
        return $this->container['cancelStatus'];
    }

    /**
     * Sets cancelStatus
     *
     * @param string|null $cancelStatus cancelStatus
     *
     * @return self
     */
    public function setCancelStatus($cancelStatus)
    {
        if (is_null($cancelStatus)) {
            throw new \InvalidArgumentException('non-nullable cancelStatus cannot be null');
        }
        $this->container['cancelStatus'] = $cancelStatus;

        return $this;
    }

    /**
     * Gets legacyOrderId
     *
     * @return string|null
     */
    public function getLegacyOrderId()
    {
        return $this->container['legacyOrderId'];
    }

    /**
     * Sets legacyOrderId
     *
     * @param string|null $legacyOrderId legacyOrderId
     *
     * @return self
     */
    public function setLegacyOrderId($legacyOrderId)
    {
        if (is_null($legacyOrderId)) {
            throw new \InvalidArgumentException('non-nullable legacyOrderId cannot be null');
        }
        $this->container['legacyOrderId'] = $legacyOrderId;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId marketplaceId
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {
        if (is_null($marketplaceId)) {
            throw new \InvalidArgumentException('non-nullable marketplaceId cannot be null');
        }
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets partialOrderType
     *
     * @return string|null
     */
    public function getPartialOrderType()
    {
        return $this->container['partialOrderType'];
    }

    /**
     * Sets partialOrderType
     *
     * @param string|null $partialOrderType partialOrderType
     *
     * @return self
     */
    public function setPartialOrderType($partialOrderType)
    {
        if (is_null($partialOrderType)) {
            throw new \InvalidArgumentException('non-nullable partialOrderType cannot be null');
        }
        $this->container['partialOrderType'] = $partialOrderType;

        return $this;
    }

    /**
     * Gets paymentStatus
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param string|null $paymentStatus paymentStatus
     *
     * @return self
     */
    public function setPaymentStatus($paymentStatus)
    {
        if (is_null($paymentStatus)) {
            throw new \InvalidArgumentException('non-nullable paymentStatus cannot be null');
        }
        $this->container['paymentStatus'] = $paymentStatus;

        return $this;
    }

    /**
     * Gets payoutRecoupInfo
     *
     * @return \macropage\SDKs\ebay\rest\postorder\Model\PayoutRecoupInfo|null
     */
    public function getPayoutRecoupInfo()
    {
        return $this->container['payoutRecoupInfo'];
    }

    /**
     * Sets payoutRecoupInfo
     *
     * @param \macropage\SDKs\ebay\rest\postorder\Model\PayoutRecoupInfo|null $payoutRecoupInfo payoutRecoupInfo
     *
     * @return self
     */
    public function setPayoutRecoupInfo($payoutRecoupInfo)
    {
        if (is_null($payoutRecoupInfo)) {
            throw new \InvalidArgumentException('non-nullable payoutRecoupInfo cannot be null');
        }
        $this->container['payoutRecoupInfo'] = $payoutRecoupInfo;

        return $this;
    }

    /**
     * Gets requestorType
     *
     * @return string|null
     */
    public function getRequestorType()
    {
        return $this->container['requestorType'];
    }

    /**
     * Sets requestorType
     *
     * @param string|null $requestorType requestorType
     *
     * @return self
     */
    public function setRequestorType($requestorType)
    {
        if (is_null($requestorType)) {
            throw new \InvalidArgumentException('non-nullable requestorType cannot be null');
        }
        $this->container['requestorType'] = $requestorType;

        return $this;
    }

    /**
     * Gets requestRefundAmount
     *
     * @return \macropage\SDKs\ebay\rest\postorder\Model\Amount|null
     */
    public function getRequestRefundAmount()
    {
        return $this->container['requestRefundAmount'];
    }

    /**
     * Sets requestRefundAmount
     *
     * @param \macropage\SDKs\ebay\rest\postorder\Model\Amount|null $requestRefundAmount requestRefundAmount
     *
     * @return self
     */
    public function setRequestRefundAmount($requestRefundAmount)
    {
        if (is_null($requestRefundAmount)) {
            throw new \InvalidArgumentException('non-nullable requestRefundAmount cannot be null');
        }
        $this->container['requestRefundAmount'] = $requestRefundAmount;

        return $this;
    }

    /**
     * Gets sellerLoginName
     *
     * @return string|null
     */
    public function getSellerLoginName()
    {
        return $this->container['sellerLoginName'];
    }

    /**
     * Sets sellerLoginName
     *
     * @param string|null $sellerLoginName sellerLoginName
     *
     * @return self
     */
    public function setSellerLoginName($sellerLoginName)
    {
        if (is_null($sellerLoginName)) {
            throw new \InvalidArgumentException('non-nullable sellerLoginName cannot be null');
        }
        $this->container['sellerLoginName'] = $sellerLoginName;

        return $this;
    }

    /**
     * Gets sellerResponseDueDate
     *
     * @return \DateTime|null
     */
    public function getSellerResponseDueDate()
    {
        return $this->container['sellerResponseDueDate'];
    }

    /**
     * Sets sellerResponseDueDate
     *
     * @param \DateTime|null $sellerResponseDueDate sellerResponseDueDate
     *
     * @return self
     */
    public function setSellerResponseDueDate($sellerResponseDueDate)
    {
        if (is_null($sellerResponseDueDate)) {
            throw new \InvalidArgumentException('non-nullable sellerResponseDueDate cannot be null');
        }
        $this->container['sellerResponseDueDate'] = $sellerResponseDueDate;

        return $this;
    }

    /**
     * Gets shipmentDate
     *
     * @return \DateTime|null
     */
    public function getShipmentDate()
    {
        return $this->container['shipmentDate'];
    }

    /**
     * Sets shipmentDate
     *
     * @param \DateTime|null $shipmentDate shipmentDate
     *
     * @return self
     */
    public function setShipmentDate($shipmentDate)
    {
        if (is_null($shipmentDate)) {
            throw new \InvalidArgumentException('non-nullable shipmentDate cannot be null');
        }
        $this->container['shipmentDate'] = $shipmentDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


